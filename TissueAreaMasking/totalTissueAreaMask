function [BW,maskedRGBImage] = totalAreaMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.
 
% This may be modified by the user with MATLAB's Color Thresholder app. to meet the 
% needs and mask specifications of each user

% Auto-generated by colorThresholder app on 09-Jan-2021
%------------------------------------------------------
 

 

% Convert RGB image to chosen color space
I = rgb2hsv(RGB);
 

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 0.986;
 

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 0.166;
 

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.749;
channel3Max = 0.902;
 

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
 

% Create mask based on selected regions of interest on point cloud projection
I = double(I);
[m,n,~] = size(I);
polyBW = false([m,n]);
I = reshape(I,[m*n 3]);
 

% Convert HSV color space to canonical coordinates
Xcoord = I(:,2).*I(:,3).*cos(2*pi*I(:,1));
Ycoord = I(:,2).*I(:,3).*sin(2*pi*I(:,1));
I(:,1) = Xcoord;
I(:,2) = Ycoord;
clear Xcoord Ycoord
 

% Project 3D data into 2D projected view from current camera view point within app
J = rotateColorSpace(I);
 

% Apply polygons drawn on point cloud in app
polyBW = applyPolygons(J,polyBW);
 

% Combine both masks
BW = sliderBW & polyBW;
 

% Invert mask
BW = ~BW;
 

% Initialize output masked image based on input image.
maskedRGBImage = RGB;
 

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;
 

end
 

function J = rotateColorSpace(I)
 

% Translate the data to the mean of the current image within app
shiftVec = [-0.000706 -0.005743 0.068979];
I = I - shiftVec;
I = [I ones(size(I,1),1)]';
 

% Apply transformation matrix
tMat = [-1.260496 -1.072832 -0.000000 0.698174;
    0.086556 -0.140764 0.555682 -0.487108;
    0.907764 -1.476282 -0.052984 5.055426;
    0.000000 0.000000 0.000000 1.000000];
 

J = (tMat*I)';
end
 

function polyBW = applyPolygons(J,polyBW)
 

% Define each manually generated ROI
hPoints(1).data = [0.528836 -0.011752;
    0.984106 0.007111;
    0.809216 -0.109841;
    0.706502 -0.128705;
    0.534388 -0.124932];
 

% Iteratively apply each ROI
for ii = 1:length(hPoints)
    if size(hPoints(ii).data,1) > 2
        in = inpolygon(J(:,1),J(:,2),hPoints(ii).data(:,1),hPoints(ii).data(:,2));
        in = reshape(in,size(polyBW));
        polyBW = polyBW | in;
    end
end
 

end
